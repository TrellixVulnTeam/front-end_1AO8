{"version":3,"file":"ngx-logger.js","sources":["../../../src/lib/http.service.ts","../../../src/lib/types/logger-level.enum.ts","../../../src/lib/logger.config.ts","../../../src/lib/config.engine.ts","../../../src/lib/resources/color-schemes.ts","../../../src/lib/utils/logger.utils.ts","../../../src/lib/types/log-position.ts","../../../src/lib/mapper.service.ts","../../../src/lib/logger.service.ts","../../../src/lib/custom-logger.service.ts","../../../src/lib/logger.module.ts","../../../src/lib/logger-monitor.ts","../../../src/lib/types/ngx-log.interface.ts","../../../src/public_api.ts","../../../src/ngx-logger.ts"],"names":["vlq.decode"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpBackend, HttpRequest, HttpResponse} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {filter, map} from 'rxjs/operators';\r\nimport { NGXLogInterface } from './types/ngx-log.interface';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerHttpService {\r\n  constructor(private readonly httpBackend: HttpBackend) { }\r\n\r\n  logOnServer(url: string, log: NGXLogInterface, options: object): Observable<any> {\r\n    // HttpBackend skips all HttpInterceptors\r\n    // They may log errors using this service causing circular calls\r\n    const req = new HttpRequest<any>('POST', url, log, options || {});\r\n    return this.httpBackend.handle(req).pipe(\r\n      filter(e => e instanceof HttpResponse),\r\n      map<HttpResponse<any>, any>((httpResponse: HttpResponse<any>) => httpResponse.body)\r\n    );\r\n  }\r\n\r\n}\r\n","export enum NgxLoggerLevel {\r\n  TRACE = 0,\r\n  DEBUG = 1,\r\n  INFO = 2,\r\n  LOG = 3,\r\n  WARN = 4,\r\n  ERROR = 5,\r\n  FATAL = 6,\r\n  OFF = 7\r\n}\r\n","import { LoggerColorScheme } from \"./types/logger-color-scheme\";\r\nimport { NgxLoggerLevel } from \"./types/logger-level.enum\";\r\n\r\nexport class LoggerConfig {\r\n  level: NgxLoggerLevel;\r\n  serverLogLevel?: NgxLoggerLevel;\r\n  serverLoggingUrl?: string;\r\n  disableConsoleLogging?: boolean;\r\n  httpResponseType?: \"arraybuffer\" | \"blob\" | \"text\" | \"json\";\r\n  enableSourceMaps?: boolean;\r\n  /** Number of calls that will be ignored when trying to get line of stacktrace */\r\n  proxiedSteps?: number;\r\n  /** Timestamp format: any format accepted by Angular DatePipe. Defaults to ISOString */\r\n  timestampFormat?: string;\r\n  colorScheme?: LoggerColorScheme;\r\n  disableFileDetails?: boolean;\r\n}\r\n","import {LoggerConfig} from './logger.config';\r\nimport { NgxLoggerLevel } from './types/logger-level.enum';\r\n\r\nexport class NGXLoggerConfigEngine {\r\n\r\n  private _config: LoggerConfig;\r\n  constructor(readonly config: LoggerConfig) {\r\n    this._config = config;\r\n  }\r\n\r\n  /** Get a readonly access to the level configured for the NGXLogger */\r\n  get level(): NgxLoggerLevel {\r\n    return this._config.level;\r\n  }\r\n\r\n  /** Get a readonly access to the serverLogLevel configured for the NGXLogger */\r\n  get serverLogLevel(): NgxLoggerLevel {\r\n    return this._config.serverLogLevel;\r\n  }\r\n\r\n  updateConfig(config: LoggerConfig) {\r\n    this._config = this._clone(config);\r\n  }\r\n\r\n  getConfig() {\r\n    return this._clone(this._config);\r\n  }\r\n\r\n  // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)\r\n  // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make\r\n  // this a deep clone\r\n  private _clone(object: any) {\r\n    const cloneConfig: LoggerConfig = new LoggerConfig();\r\n\r\n    Object.keys(object).forEach((key) => {\r\n      cloneConfig[key] = object[key];\r\n    });\r\n\r\n    return cloneConfig;\r\n  }\r\n}\r\n","import {LoggerColorScheme} from '../types/logger-color-scheme';\r\n\r\nexport const DEFAULT_COLOR_SCHEME: LoggerColorScheme = [\r\n  'purple',\r\n  'teal',\r\n  'gray',\r\n  'gray',\r\n  'red',\r\n  'red',\r\n  'red'\r\n];\r\n","import {DEFAULT_COLOR_SCHEME} from '../resources/color-schemes';\r\nimport {NgxLoggerLevel} from '../types/logger-level.enum';\r\n\r\nexport class NGXLoggerUtils {\r\n\r\n  static prepareMetaString(timestamp: string, logLevel: string, fileName: string, lineNumber: string) {\r\n    const fileDetails = fileName ? ` [${fileName}:${lineNumber}]` : '';\r\n\r\n    return `${timestamp} ${logLevel}${fileDetails}`;\r\n  }\r\n\r\n  static getColor(level: NgxLoggerLevel, configColorScheme?: Array<string>): string | undefined {\r\n    switch (level) {\r\n      case NgxLoggerLevel.TRACE:\r\n        return this.getColorFromConfig(NgxLoggerLevel.TRACE, configColorScheme);\r\n      case NgxLoggerLevel.DEBUG:\r\n        return this.getColorFromConfig(NgxLoggerLevel.DEBUG, configColorScheme);\r\n      case NgxLoggerLevel.INFO:\r\n        return this.getColorFromConfig(NgxLoggerLevel.INFO, configColorScheme);\r\n      case NgxLoggerLevel.LOG:\r\n        return this.getColorFromConfig(NgxLoggerLevel.LOG, configColorScheme);\r\n      case NgxLoggerLevel.WARN:\r\n        return this.getColorFromConfig(NgxLoggerLevel.WARN, configColorScheme);\r\n      case NgxLoggerLevel.ERROR:\r\n        return this.getColorFromConfig(NgxLoggerLevel.ERROR, configColorScheme);\r\n      case NgxLoggerLevel.FATAL:\r\n        return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);\r\n      case NgxLoggerLevel.OFF:\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  private static getColorFromConfig(level: number, configColorScheme: Array<string>): string | undefined {\r\n    if (!configColorScheme) {\r\n      return DEFAULT_COLOR_SCHEME[level];\r\n    }\r\n\r\n    return configColorScheme[level];\r\n  }\r\n\r\n  static prepareMessage(message) {\r\n    try {\r\n      if (typeof message !== 'string' && !(message instanceof Error)) {\r\n        message = JSON.stringify(message, null, 2);\r\n      }\r\n    } catch (e) {\r\n      // additional = [message, ...additional];\r\n      message = 'The provided \"message\" value could not be parsed with JSON.stringify().';\r\n    }\r\n\r\n    return message;\r\n  }\r\n\r\n  static prepareAdditionalParameters(additional: any[]) {\r\n    if (additional === null || additional === undefined) {\r\n      return null;\r\n    }\r\n\r\n    return additional.map((next, idx) => {\r\n      try {\r\n        // We just want to make sure the JSON can be parsed, we do not want to actually change the type\r\n        if (typeof next === 'object') {\r\n          JSON.stringify(next);\r\n        }\r\n\r\n        return next;\r\n      } catch (e) {\r\n        return `The additional[${idx}] value could not be parsed using JSON.stringify().`;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","export class LogPosition {\r\n  constructor(\r\n    public fileName: string,\r\n    public lineNumber: number,\r\n    public columnNumber: number\r\n  ) {}\r\n  toString() {\r\n    return this.fileName + ':' + this.lineNumber + ':' + this.columnNumber;\r\n  }\r\n}\r\n","import { SourceMap } from '@angular/compiler';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpBackend, HttpRequest, HttpResponse } from '@angular/common/http';\r\nimport * as vlq from 'vlq';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, filter, map, retry, shareReplay, switchMap } from 'rxjs/operators';\r\nimport { LogPosition } from './types/log-position';\r\n\r\n@Injectable()\r\nexport class NGXMapperService {\r\n\r\n  // cache for source maps, key is source map location, ie. 'http://localhost:4200/main.js.map'\r\n  private sourceMapCache: Map<string, Observable<SourceMap>> = new Map();\r\n\r\n  // cache for specific log position, key is the dist position, ie 'main.js:339:21'\r\n  private logPositionCache: Map<string, Observable<LogPosition>> = new Map();\r\n\r\n  constructor(private httpBackend: HttpBackend) {\r\n  }\r\n\r\n  /*\r\n  Static Functions\r\n */\r\n  private static getStackLine(proxiedSteps: number): string {\r\n    const error = new Error();\r\n\r\n    try {\r\n      // noinspection ExceptionCaughtLocallyJS\r\n      throw error;\r\n    } catch (e) {\r\n\r\n      try {\r\n        // Here are different examples of stacktrace \r\n\r\n        // Firefox (last line is the user code, the 4 first are ours):\r\n        // getStackLine@http://localhost:4200/main.js:358:23\r\n        // getCallerDetails@http://localhost:4200/main.js:557:44\r\n        // _log@http://localhost:4200/main.js:830:28\r\n        // debug@http://localhost:4200/main.js:652:14\r\n        // handleLog@http://localhost:4200/main.js:1158:29\r\n\r\n        // Chrome and Edge (last line is the user code):\r\n        // Error\r\n        // at Function.getStackLine (ngx-logger.js:329)\r\n        // at NGXMapperService.getCallerDetails (ngx-logger.js:528)\r\n        // at NGXLogger._log (ngx-logger.js:801)\r\n        // at NGXLogger.info (ngx-logger.js:631)\r\n        // at AppComponent.handleLog (app.component.ts:38)\r\n\r\n        let defaultProxy = 4; // We make 4 functions call before getting here\r\n        const firstStackLine = error.stack.split('\\n')[0];\r\n        if (!firstStackLine.includes('.js:')) {\r\n          // The stacktrace starts with no function call (example in Chrome or Edge)\r\n          defaultProxy = defaultProxy + 1;\r\n        }\r\n\r\n        return error.stack.split('\\n')[(defaultProxy + (proxiedSteps || 0))];\r\n      } catch (e) {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  private static getPosition(stackLine: string): LogPosition {\r\n    // strip base path, then parse filename, line, and column\r\n    const positionStartIndex = stackLine.lastIndexOf('\\/');\r\n    let positionEndIndex = stackLine.indexOf(')');\r\n    if (positionEndIndex < 0) {\r\n      positionEndIndex = undefined;\r\n    }\r\n\r\n    const position = stackLine.substring(positionStartIndex + 1, positionEndIndex);\r\n    const dataArray = position.split(':');\r\n    if (dataArray.length === 3) {\r\n      return new LogPosition(dataArray[0], +dataArray[1], +dataArray[2]);\r\n    }\r\n    return new LogPosition('unknown', 0, 0);\r\n  }\r\n\r\n  private static getTranspileLocation(stackLine: string): string {\r\n    // Example stackLine:\r\n    // Firefox : getStackLine@http://localhost:4200/main.js:358:23\r\n    // Chrome and Edge : at Function.getStackLine (ngx-logger.js:329)\r\n    let locationStartIndex = stackLine.indexOf('(');\r\n    if (locationStartIndex < 0) {\r\n      locationStartIndex = stackLine.lastIndexOf('@');\r\n      if (locationStartIndex < 0) {\r\n        locationStartIndex = stackLine.lastIndexOf(' ');\r\n      }\r\n    }\r\n\r\n    let locationEndIndex = stackLine.indexOf(')');\r\n    if (locationEndIndex < 0) {\r\n      locationEndIndex = undefined;\r\n    }\r\n\r\n    return stackLine.substring(locationStartIndex + 1, locationEndIndex);\r\n  }\r\n\r\n  private static getMapFilePath(stackLine: string): string {\r\n    const file = NGXMapperService.getTranspileLocation(stackLine);\r\n    const mapFullPath = file.substring(0, file.lastIndexOf(':'));\r\n    return mapFullPath.substring(0, mapFullPath.lastIndexOf(':')) + '.map';\r\n  }\r\n\r\n  private static getMapping(sourceMap: SourceMap, position: LogPosition): LogPosition {\r\n    // => ';' indicates end of a line\r\n    // => ',' separates mappings in a line\r\n    // decoded mapping => [ generatedCodeColumn, sourceFileIndex, sourceCodeLine, sourceCodeColumn, nameIndex ]\r\n    let sourceFileIndex = 0,   // second field\r\n      sourceCodeLine = 0,    // third field\r\n      sourceCodeColumn = 0;  // fourth field\r\n\r\n    const lines = sourceMap.mappings.split(';');\r\n\r\n    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\r\n      // reset column position to 0 after each line\r\n      let generatedCodeColumn = 0;\r\n      // decode sections in line\r\n      const columns = lines[lineIndex].split(',');\r\n\r\n      for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\r\n        const decodedSection = vlq.decode(columns[columnIndex]);\r\n        if (decodedSection.length >= 4) {\r\n          // update relative positions\r\n          generatedCodeColumn += decodedSection[0];\r\n          sourceFileIndex += decodedSection[1];\r\n          sourceCodeLine += decodedSection[2];\r\n          sourceCodeColumn += decodedSection[3];\r\n        }\r\n\r\n        // check if matching map\r\n        if (lineIndex === position.lineNumber) {\r\n          if (generatedCodeColumn === position.columnNumber) {\r\n            // matching column and line found\r\n            return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine, sourceCodeColumn);\r\n          } else if (columnIndex + 1 === columns.length) {\r\n            // matching column not found, but line is correct\r\n            return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine, 0);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // failed if reached\r\n    return new LogPosition('unknown', 0, 0);\r\n  }\r\n\r\n  /**\r\n   * does the http get request to get the source map\r\n   * @param sourceMapLocation\r\n   * @param distPosition\r\n   */\r\n  private _getSourceMap(sourceMapLocation: string, distPosition: LogPosition): Observable<LogPosition> {\r\n    const req = new HttpRequest<SourceMap>('GET', sourceMapLocation);\r\n    const distPositionKey = distPosition.toString();\r\n\r\n    // if the specific log position is already in cache return it\r\n    if (this.logPositionCache.has(distPositionKey)) {\r\n      return this.logPositionCache.get(distPositionKey);\r\n    }\r\n\r\n    // otherwise check if the source map is already cached for given source map location\r\n    if (!this.sourceMapCache.has(sourceMapLocation)) {\r\n      // obtain the source map if not cached\r\n      this.sourceMapCache.set(\r\n        sourceMapLocation,\r\n        this.httpBackend.handle(req).pipe(\r\n          filter((e) => e instanceof HttpResponse),\r\n          map<HttpResponse<SourceMap>, SourceMap>(\r\n            (httpResponse: HttpResponse<SourceMap>) => httpResponse.body\r\n          ),\r\n          retry(3),\r\n          shareReplay(1)\r\n        )\r\n      );\r\n    }\r\n\r\n    // at this point the source map is cached, use it to get specific log position mapping\r\n    const logPosition$ = this.sourceMapCache.get(sourceMapLocation).pipe(\r\n      map<SourceMap, LogPosition>((sourceMap) =>\r\n        // map generated position to source position\r\n        NGXMapperService.getMapping(sourceMap, distPosition)\r\n      ),\r\n      catchError(() => of(distPosition)),\r\n      shareReplay(1)\r\n    );\r\n\r\n    // store specific log position in cache for given dest position and return it\r\n    this.logPositionCache.set(distPositionKey, logPosition$);\r\n\r\n    return logPosition$;\r\n  }\r\n\r\n  /**\r\n   * Returns the LogPosition for the current log\r\n   * If sourceMaps are enabled, it attemps to get the source map from the server, and use that to parse the file name\r\n   * and number of the call\r\n   * @param sourceMapsEnabled\r\n   * @param proxiedSteps\r\n   */\r\n  public getCallerDetails(sourceMapsEnabled: boolean, proxiedSteps: number): Observable<LogPosition> {\r\n    // parse generated file mapping from stack trace\r\n\r\n    const stackLine = NGXMapperService.getStackLine(proxiedSteps);\r\n\r\n    // if we were not able to parse the stackLine, just return an empty Log Position\r\n    if (!stackLine) {\r\n      return of(new LogPosition('', 0, 0));\r\n    }\r\n\r\n    return of([\r\n      NGXMapperService.getPosition(stackLine),\r\n      NGXMapperService.getMapFilePath(stackLine)\r\n    ]).pipe(\r\n      switchMap<[LogPosition, string], Observable<LogPosition>>(([distPosition, sourceMapLocation]) => {\r\n\r\n        // if source maps are not enabled, or if we've previously tried to get the source maps, but they failed,\r\n        // then just use the position of the JS instead of the source\r\n        if (!sourceMapsEnabled) {\r\n          return of(distPosition);\r\n        }\r\n\r\n        // finally try to get the source map and return the position\r\n        return this._getSourceMap(sourceMapLocation, distPosition);\r\n      })\r\n    );\r\n\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { isPlatformBrowser, DatePipe } from '@angular/common';\r\n\r\nimport { NGXLoggerHttpService } from './http.service';\r\nimport { LogPosition } from './types/log-position';\r\nimport { NgxLoggerLevel } from './types/logger-level.enum';\r\nimport { LoggerConfig } from './logger.config';\r\nimport { NGXLoggerConfigEngine } from './config.engine';\r\nimport { NGXLoggerUtils } from './utils/logger.utils';\r\nimport { NGXLoggerMonitor } from './logger-monitor';\r\nimport { NGXLogInterface } from './types/ngx-log.interface';\r\nimport { NGXMapperService } from './mapper.service';\r\n\r\nexport const Levels = [\r\n  'TRACE',\r\n  'DEBUG',\r\n  'INFO',\r\n  'LOG',\r\n  'WARN',\r\n  'ERROR',\r\n  'FATAL',\r\n  'OFF'\r\n];\r\n\r\n\r\n@Injectable()\r\nexport class NGXLogger {\r\n  private readonly _isIE: boolean;\r\n  private readonly _logFunc: Function;\r\n  private config: NGXLoggerConfigEngine;\r\n  private _customHttpHeaders: HttpHeaders;\r\n  private _customParams: HttpParams;\r\n  private _withCredentials: boolean = false;\r\n\r\n  private _loggerMonitor: NGXLoggerMonitor;\r\n\r\n  constructor(private readonly mapperService: NGXMapperService, private readonly httpService: NGXLoggerHttpService,\r\n    loggerConfig: LoggerConfig, @Inject(PLATFORM_ID) private platformId,\r\n    private readonly datePipe: DatePipe) {\r\n    this._isIE = isPlatformBrowser(platformId) && navigator && navigator.userAgent &&\r\n      !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\\//) || navigator.userAgent.match(/Edge\\//));\r\n\r\n    // each instance of the logger should have their own config engine\r\n    this.config = new NGXLoggerConfigEngine(loggerConfig);\r\n\r\n    this._logFunc = this._isIE ? this._logIE.bind(this) : this._logModern.bind(this);\r\n\r\n  }\r\n\r\n  /** Get a readonly access to the level configured for the NGXLogger */\r\n  get level(): NgxLoggerLevel {\r\n    return this.config.level;\r\n  }\r\n\r\n  /** Get a readonly access to the serverLogLevel configured for the NGXLogger */\r\n  get serverLogLevel(): NgxLoggerLevel {\r\n    return this.config.serverLogLevel;\r\n  }\r\n\r\n  public trace(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.TRACE, message, additional);\r\n  }\r\n\r\n  public debug(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.DEBUG, message, additional);\r\n  }\r\n\r\n  public info(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.INFO, message, additional);\r\n  }\r\n\r\n  public log(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.LOG, message, additional);\r\n  }\r\n\r\n  public warn(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.WARN, message, additional);\r\n  }\r\n\r\n  public error(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.ERROR, message, additional);\r\n  }\r\n\r\n  public fatal(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.FATAL, message, additional);\r\n  }\r\n\r\n  public setCustomHttpHeaders(headers: HttpHeaders) {\r\n    this._customHttpHeaders = headers;\r\n  }\r\n\r\n  public setCustomParams(params: HttpParams) {\r\n    this._customParams = params;\r\n  }\r\n\r\n  public setWithCredentialsOptionValue(withCredentials: boolean) {\r\n    this._withCredentials = withCredentials;\r\n  }\r\n\r\n  public registerMonitor(monitor: NGXLoggerMonitor) {\r\n    this._loggerMonitor = monitor;\r\n  }\r\n\r\n  public updateConfig(config: LoggerConfig) {\r\n    this.config.updateConfig(config);\r\n  }\r\n\r\n  public getConfigSnapshot(): LoggerConfig {\r\n    return this.config.getConfig();\r\n  }\r\n\r\n  private _logIE(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\r\n\r\n    // Coloring doesn't work in IE\r\n    // make sure additional isn't null or undefined so that ...additional doesn't error\r\n    additional = additional || [];\r\n\r\n    switch (level) {\r\n      case NgxLoggerLevel.WARN:\r\n        console.warn(`${metaString} `, message, ...additional);\r\n        break;\r\n      case NgxLoggerLevel.ERROR:\r\n      case NgxLoggerLevel.FATAL:\r\n        console.error(`${metaString} `, message, ...additional);\r\n        break;\r\n      case NgxLoggerLevel.INFO:\r\n        console.info(`${metaString} `, message, ...additional);\r\n        break;\r\n      default:\r\n        console.log(`${metaString} `, message, ...additional);\r\n    }\r\n  }\r\n\r\n  private _logModern(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\r\n    const configuredColors = this.getConfigSnapshot().colorScheme;\r\n    const color = NGXLoggerUtils.getColor(level, configuredColors);\r\n\r\n    // make sure additional isn't null or undefined so that ...additional doesn't error\r\n    additional = additional || [];\r\n\r\n    switch (level) {\r\n      case NgxLoggerLevel.WARN:\r\n        console.warn(`%c${metaString}`, `color:${color}`, message, ...additional);\r\n        break;\r\n      case NgxLoggerLevel.ERROR:\r\n      case NgxLoggerLevel.FATAL:\r\n        console.error(`%c${metaString}`, `color:${color}`, message, ...additional);\r\n        break;\r\n      case NgxLoggerLevel.INFO:\r\n        console.info(`%c${metaString}`, `color:${color}`, message, ...additional);\r\n        break;\r\n      //  Disabling console.trace since the stack trace is not helpful. it is showing the stack trace of\r\n      // the console.trace statement\r\n      // case NgxLoggerLevel.TRACE:\r\n      //   console.trace(`%c${metaString}`, `color:${color}`, message, ...additional);\r\n      //   break;\r\n\r\n      case NgxLoggerLevel.DEBUG:\r\n        console.debug(`%c${metaString}`, `color:${color}`, message, ...additional);\r\n        break;\r\n      default:\r\n        console.log(`%c${metaString}`, `color:${color}`, message, ...additional);\r\n    }\r\n  }\r\n\r\n  private _log(level: NgxLoggerLevel, message, additional: any[] = [], logOnServer: boolean = true): void {\r\n    const config = this.config.getConfig();\r\n    const isLog2Server = logOnServer && config.serverLoggingUrl && level >= config.serverLogLevel;\r\n    const isLogLevelEnabled = level >= config.level;\r\n\r\n    if (!(message && (isLog2Server || isLogLevelEnabled))) {\r\n      return;\r\n    }\r\n\r\n    const logLevelString = Levels[level];\r\n\r\n    message = typeof message === 'function' ? message() : message;\r\n\r\n    // only use validated parameters for HTTP requests\r\n    const validatedAdditionalParameters = NGXLoggerUtils.prepareAdditionalParameters(additional);\r\n\r\n    const timestamp = config.timestampFormat ?\r\n      this.datePipe.transform(new Date(), config.timestampFormat) :\r\n      new Date().toISOString();\r\n\r\n    this.mapperService.getCallerDetails(config.enableSourceMaps, config.proxiedSteps).subscribe((callerDetails: LogPosition) => {\r\n      const logObject: NGXLogInterface = {\r\n        // prepareMessage is needed to match NGXLogInterface\r\n        // Even though I think message should be of type any (same as console.xxx signature)\r\n        // I'm not doing this right now as this would be a breaking change\r\n        message: NGXLoggerUtils.prepareMessage(message),\r\n        additional: validatedAdditionalParameters,\r\n        level: level,\r\n        timestamp: timestamp,\r\n        fileName: callerDetails.fileName,\r\n        lineNumber: callerDetails.lineNumber.toString()\r\n      };\r\n\r\n      if (this._loggerMonitor && isLogLevelEnabled) {\r\n        this._loggerMonitor.onLog(logObject);\r\n      }\r\n\r\n      if (isLog2Server) {\r\n        // make sure the stack gets sent to the server (without altering the message for console logging)\r\n        logObject.message = message instanceof Error ? message.stack : message;\r\n        logObject.message = NGXLoggerUtils.prepareMessage(logObject.message);\r\n\r\n        const headers = this._customHttpHeaders || new HttpHeaders();\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        const options = {\r\n          headers: headers,\r\n          params: this._customParams || new HttpParams(),\r\n          responseType: config.httpResponseType || 'json',\r\n          withCredentials: this._withCredentials\r\n        };\r\n        // Allow logging on server even if client log level is off\r\n        this.httpService.logOnServer(config.serverLoggingUrl, logObject, options).subscribe((res: any) => {\r\n          // I don't think we should do anything on success\r\n        },\r\n          (error: HttpErrorResponse) => {\r\n            this._log(NgxLoggerLevel.ERROR, `FAILED TO LOG ON SERVER: ${message}`, [error], false);\r\n          }\r\n        );\r\n      }\r\n\r\n\r\n      // if no message or the log level is less than the environ\r\n      if (isLogLevelEnabled && !config.disableConsoleLogging) {\r\n        const metaString = NGXLoggerUtils.prepareMetaString(\r\n          timestamp,\r\n          logLevelString,\r\n          config.disableFileDetails ? null : callerDetails.fileName,\r\n          callerDetails.lineNumber.toString()\r\n        );\r\n\r\n        return this._logFunc(level, metaString, message, additional);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\n\r\nimport {LoggerConfig} from './logger.config';\r\nimport {NGXLoggerHttpService} from './http.service';\r\nimport {NGXLogger} from './logger.service';\r\nimport {NGXLoggerMonitor} from './logger-monitor';\r\nimport {NGXMapperService} from './mapper.service';\r\n\r\n\r\n/**\r\n * CustomNGXLoggerService is designed to allow users to get a new instance of a logger\r\n */\r\n@Injectable()\r\nexport class CustomNGXLoggerService {\r\n\r\n  constructor(private readonly mapperService: NGXMapperService,\r\n              private readonly httpService: NGXLoggerHttpService,\r\n              @Inject(PLATFORM_ID) private readonly platformId, private readonly datePipe: DatePipe) {\r\n  }\r\n\r\n  create(config: LoggerConfig, httpService?: NGXLoggerHttpService, logMonitor?: NGXLoggerMonitor,\r\n         mapperService?: NGXMapperService): NGXLogger {\r\n    // you can inject your own httpService or use the default,\r\n    const logger = new NGXLogger(mapperService || this.mapperService,\r\n      httpService || this.httpService, config, this.platformId, this.datePipe);\r\n\r\n    if (logMonitor) {\r\n      logger.registerMonitor(logMonitor);\r\n    }\r\n\r\n    return logger;\r\n  }\r\n}\r\n\r\n\r\n","import {CommonModule, DatePipe} from '@angular/common';\r\nimport {ModuleWithProviders, NgModule} from '@angular/core';\r\n\r\nimport {NGXLogger} from './logger.service';\r\nimport {LoggerConfig} from './logger.config';\r\nimport {CustomNGXLoggerService} from './custom-logger.service';\r\nimport {NGXLoggerHttpService} from './http.service';\r\nimport {NGXMapperService} from './mapper.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  providers: [\r\n    NGXLogger,\r\n    NGXLoggerHttpService,\r\n    CustomNGXLoggerService,\r\n    NGXMapperService,\r\n    DatePipe\r\n  ]\r\n})\r\nexport class LoggerModule {\r\n  static forRoot(config: LoggerConfig | null | undefined): ModuleWithProviders<LoggerModule> {\r\n    return {\r\n      ngModule: LoggerModule,\r\n      providers: [\r\n        {provide: LoggerConfig, useValue: config || {}},\r\n        NGXLogger,\r\n        NGXLoggerHttpService,\r\n        CustomNGXLoggerService,\r\n        NGXMapperService\r\n      ]\r\n    };\r\n  }\r\n  static forChild(): ModuleWithProviders<LoggerModule> {\r\n    return {\r\n      ngModule: LoggerModule,\r\n      providers: [\r\n        NGXLogger,\r\n        NGXLoggerHttpService,\r\n        CustomNGXLoggerService,\r\n        NGXMapperService\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import {NGXLogInterface} from './types/ngx-log.interface';\r\n\r\nexport abstract class NGXLoggerMonitor {\r\n  abstract onLog(logObject: NGXLogInterface): void;\r\n}\r\n","import {NgxLoggerLevel} from './logger-level.enum';\r\n\r\nexport class NGXLogInterface {\r\n  level: NgxLoggerLevel;\r\n  timestamp: string;\r\n  fileName: string;\r\n  lineNumber: string;\r\n  message: string;\r\n  additional: any[];\r\n}\r\n","/*\r\n * Public API Surface of ngx-logger\r\n */\r\n\r\nexport * from './lib/logger.barrel';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}