import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { DatePipe } from '@angular/common';
import { NGXLoggerHttpService } from './http.service';
import { NGXLogger } from './logger.service';
import { NGXMapperService } from './mapper.service';
/**
 * CustomNGXLoggerService is designed to allow users to get a new instance of a logger
 */
export class CustomNGXLoggerService {
    constructor(mapperService, httpService, platformId, datePipe) {
        this.mapperService = mapperService;
        this.httpService = httpService;
        this.platformId = platformId;
        this.datePipe = datePipe;
    }
    create(config, httpService, logMonitor, mapperService) {
        // you can inject your own httpService or use the default,
        const logger = new NGXLogger(mapperService || this.mapperService, httpService || this.httpService, config, this.platformId, this.datePipe);
        if (logMonitor) {
            logger.registerMonitor(logMonitor);
        }
        return logger;
    }
}
CustomNGXLoggerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CustomNGXLoggerService.ctorParameters = () => [
    { type: NGXMapperService },
    { type: NGXLoggerHttpService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: DatePipe }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWxvZ2dlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jdXN0b20tbG9nZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUczQyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFM0MsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFHbEQ7O0dBRUc7QUFFSCxNQUFNLE9BQU8sc0JBQXNCO0lBRWpDLFlBQTZCLGFBQStCLEVBQy9CLFdBQWlDLEVBQ1osVUFBVSxFQUFtQixRQUFrQjtRQUZwRSxrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IsZ0JBQVcsR0FBWCxXQUFXLENBQXNCO1FBQ1osZUFBVSxHQUFWLFVBQVUsQ0FBQTtRQUFtQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQ2pHLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBb0IsRUFBRSxXQUFrQyxFQUFFLFVBQTZCLEVBQ3ZGLGFBQWdDO1FBQ3JDLDBEQUEwRDtRQUMxRCxNQUFNLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsRUFDOUQsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTNFLElBQUksVUFBVSxFQUFFO1lBQ2QsTUFBTSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNwQztRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7OztZQW5CRixVQUFVOzs7O1lBTkgsZ0JBQWdCO1lBSGhCLG9CQUFvQjs0Q0FjYixNQUFNLFNBQUMsV0FBVztZQWpCeEIsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBQTEFURk9STV9JRH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGVQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuXHJcbmltcG9ydCB7TG9nZ2VyQ29uZmlnfSBmcm9tICcuL2xvZ2dlci5jb25maWcnO1xyXG5pbXBvcnQge05HWExvZ2dlckh0dHBTZXJ2aWNlfSBmcm9tICcuL2h0dHAuc2VydmljZSc7XHJcbmltcG9ydCB7TkdYTG9nZ2VyfSBmcm9tICcuL2xvZ2dlci5zZXJ2aWNlJztcclxuaW1wb3J0IHtOR1hMb2dnZXJNb25pdG9yfSBmcm9tICcuL2xvZ2dlci1tb25pdG9yJztcclxuaW1wb3J0IHtOR1hNYXBwZXJTZXJ2aWNlfSBmcm9tICcuL21hcHBlci5zZXJ2aWNlJztcclxuXHJcblxyXG4vKipcclxuICogQ3VzdG9tTkdYTG9nZ2VyU2VydmljZSBpcyBkZXNpZ25lZCB0byBhbGxvdyB1c2VycyB0byBnZXQgYSBuZXcgaW5zdGFuY2Ugb2YgYSBsb2dnZXJcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEN1c3RvbU5HWExvZ2dlclNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG1hcHBlclNlcnZpY2U6IE5HWE1hcHBlclNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBodHRwU2VydmljZTogTkdYTG9nZ2VySHR0cFNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSByZWFkb25seSBwbGF0Zm9ybUlkLCBwcml2YXRlIHJlYWRvbmx5IGRhdGVQaXBlOiBEYXRlUGlwZSkge1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlKGNvbmZpZzogTG9nZ2VyQ29uZmlnLCBodHRwU2VydmljZT86IE5HWExvZ2dlckh0dHBTZXJ2aWNlLCBsb2dNb25pdG9yPzogTkdYTG9nZ2VyTW9uaXRvcixcclxuICAgICAgICAgbWFwcGVyU2VydmljZT86IE5HWE1hcHBlclNlcnZpY2UpOiBOR1hMb2dnZXIge1xyXG4gICAgLy8geW91IGNhbiBpbmplY3QgeW91ciBvd24gaHR0cFNlcnZpY2Ugb3IgdXNlIHRoZSBkZWZhdWx0LFxyXG4gICAgY29uc3QgbG9nZ2VyID0gbmV3IE5HWExvZ2dlcihtYXBwZXJTZXJ2aWNlIHx8IHRoaXMubWFwcGVyU2VydmljZSxcclxuICAgICAgaHR0cFNlcnZpY2UgfHwgdGhpcy5odHRwU2VydmljZSwgY29uZmlnLCB0aGlzLnBsYXRmb3JtSWQsIHRoaXMuZGF0ZVBpcGUpO1xyXG5cclxuICAgIGlmIChsb2dNb25pdG9yKSB7XHJcbiAgICAgIGxvZ2dlci5yZWdpc3Rlck1vbml0b3IobG9nTW9uaXRvcik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGxvZ2dlcjtcclxuICB9XHJcbn1cclxuXHJcblxyXG4iXX0=