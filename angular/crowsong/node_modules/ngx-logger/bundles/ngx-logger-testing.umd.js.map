{"version":3,"file":"ngx-logger-testing.umd.js","sources":["../../../testing/src/lib/logger.service.mock.ts","../../../testing/src/lib/custom-logger.service.mock.ts","../../../testing/src/lib/http.service.mock.ts","../../../testing/src/lib/mapper.service.mock.ts","../../../testing/src/lib/logger-testing.module.ts","../../../testing/src/ngx-logger-testing.ts"],"sourcesContent":["import {HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {LoggerConfig, NGXLoggerMonitor} from 'ngx-logger';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class NGXLoggerMock {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  trace(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  debug(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  info(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  log(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  warn(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  error(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  fatal(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  updateConfig(config: any) {\r\n\r\n  }\r\n\r\n  setCustomHttpHeaders(headers: HttpHeaders) {\r\n  }\r\n\r\n  setCustomParams(params: HttpParams) {\r\n  }\r\n\r\n  registerMonitor(monitor: NGXLoggerMonitor) {\r\n  }\r\n\r\n  setWithCredentialsOptionValue(withCredentials: boolean) {\r\n  }\r\n\r\n  getConfigSnapshot(): LoggerConfig {\r\n    return new LoggerConfig();\r\n  }\r\n}\r\n","import {NGXLoggerMock} from './logger.service.mock';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n/**\r\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\r\n */\r\n@Injectable()\r\nexport class CustomNGXLoggerServiceMock {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  create(): NGXLoggerMock {\r\n    // you can inject your own httpService or use the default,\r\n    return new NGXLoggerMock();\r\n  }\r\n}\r\n\r\n\r\n","import {Observable, of} from 'rxjs';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class NGXLoggerHttpServiceMock {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  logOnServer(url: string, message: string, additional: any[], timestamp: string, logLevel: string): Observable<any> {\r\n    return of({});\r\n  }\r\n}\r\n","import {Observable, of} from 'rxjs';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class NGXMapperServiceMock {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  public getCallerDetails(): Observable<{fileName: string, lineNumber: number, columnNumber: number}> {\r\n    return of({fileName: 'test.ts', lineNumber: 0, columnNumber: 0});\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { NGXLoggerMock } from './logger.service.mock';\r\nimport { NGXLoggerHttpServiceMock } from './http.service.mock';\r\nimport { CustomNGXLoggerServiceMock } from './custom-logger.service.mock';\r\nimport { NGXMapperServiceMock } from './mapper.service.mock';\r\nimport {\r\n  LoggerModule,\r\n  NGXLogger,\r\n  NGXLoggerHttpService,\r\n  CustomNGXLoggerService,\r\n  NGXMapperService\r\n} from 'ngx-logger';\r\n\r\n@NgModule({\r\n  imports: [LoggerModule],\r\n  providers: [\r\n    { provide: NGXLogger, useClass: NGXLoggerMock },\r\n    { provide: NGXLoggerHttpService, useClass: NGXLoggerHttpServiceMock },\r\n    { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },\r\n    { provide: NGXMapperService, useClass: NGXMapperServiceMock }\r\n  ]\r\n})\r\nexport class LoggerTestingModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["LoggerConfig","Injectable","of","NgModule","LoggerModule","NGXLogger","NGXLoggerHttpService","CustomNGXLoggerService","NGXMapperService"],"mappings":";;;;;;;QAOE;SACC;QAED,6BAAK,GAAL,UAAM,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACvC;QAED,6BAAK,GAAL,UAAM,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACvC;QAED,4BAAI,GAAJ,UAAK,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACtC;QAED,2BAAG,GAAH,UAAI,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACrC;QAED,4BAAI,GAAJ,UAAK,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACtC;QAED,6BAAK,GAAL,UAAM,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACvC;QAED,6BAAK,GAAL,UAAM,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACvC;QAED,oCAAY,GAAZ,UAAa,MAAW;SAEvB;QAED,4CAAoB,GAApB,UAAqB,OAAoB;SACxC;QAED,uCAAe,GAAf,UAAgB,MAAkB;SACjC;QAED,uCAAe,GAAf,UAAgB,OAAyB;SACxC;QAED,qDAA6B,GAA7B,UAA8B,eAAwB;SACrD;QAED,yCAAiB,GAAjB;YACE,OAAO,IAAIA,sBAAY,EAAE,CAAC;SAC3B;;;;gBA7CFC,eAAU;;;;;ICDX;;;;QAME;SACC;QAED,2CAAM,GAAN;;YAEE,OAAO,IAAI,aAAa,EAAE,CAAC;SAC5B;;;;gBATFA,eAAU;;;;;;QCDT;SAEC;QAED,8CAAW,GAAX,UAAY,GAAW,EAAE,OAAe,EAAE,UAAiB,EAAE,SAAiB,EAAE,QAAgB;YAC9F,OAAOC,OAAE,CAAC,EAAE,CAAC,CAAC;SACf;;;;gBARFD,eAAU;;;;;;QCET;SAEC;QAEM,+CAAgB,GAAhB;YACL,OAAOC,OAAE,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAC,CAAC,CAAC;SAClE;;;;gBARFD,eAAU;;;;;;QCoBX;;;;;gBATCE,aAAQ,SAAC;oBACR,OAAO,EAAE,CAACC,sBAAY,CAAC;oBACvB,SAAS,EAAE;wBACT,EAAE,OAAO,EAAEC,mBAAS,EAAE,QAAQ,EAAE,aAAa,EAAE;wBAC/C,EAAE,OAAO,EAAEC,8BAAoB,EAAE,QAAQ,EAAE,wBAAwB,EAAE;wBACrE,EAAE,OAAO,EAAEC,gCAAsB,EAAE,QAAQ,EAAE,0BAA0B,EAAE;wBACzE,EAAE,OAAO,EAAEC,0BAAgB,EAAE,QAAQ,EAAE,oBAAoB,EAAE;qBAC9D;iBACF;;;ICtBD;;;;;;;;;;;;;;;;"}