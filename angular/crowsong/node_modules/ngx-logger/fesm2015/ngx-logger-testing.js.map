{"version":3,"file":"ngx-logger-testing.js","sources":["../../../testing/src/lib/logger.service.mock.ts","../../../testing/src/lib/custom-logger.service.mock.ts","../../../testing/src/lib/http.service.mock.ts","../../../testing/src/lib/mapper.service.mock.ts","../../../testing/src/lib/logger-testing.module.ts","../../../testing/src/ngx-logger-testing.ts"],"sourcesContent":["import {HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {LoggerConfig, NGXLoggerMonitor} from 'ngx-logger';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class NGXLoggerMock {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  trace(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  debug(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  info(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  log(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  warn(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  error(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  fatal(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  updateConfig(config: any) {\r\n\r\n  }\r\n\r\n  setCustomHttpHeaders(headers: HttpHeaders) {\r\n  }\r\n\r\n  setCustomParams(params: HttpParams) {\r\n  }\r\n\r\n  registerMonitor(monitor: NGXLoggerMonitor) {\r\n  }\r\n\r\n  setWithCredentialsOptionValue(withCredentials: boolean) {\r\n  }\r\n\r\n  getConfigSnapshot(): LoggerConfig {\r\n    return new LoggerConfig();\r\n  }\r\n}\r\n","import {NGXLoggerMock} from './logger.service.mock';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n/**\r\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\r\n */\r\n@Injectable()\r\nexport class CustomNGXLoggerServiceMock {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  create(): NGXLoggerMock {\r\n    // you can inject your own httpService or use the default,\r\n    return new NGXLoggerMock();\r\n  }\r\n}\r\n\r\n\r\n","import {Observable, of} from 'rxjs';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class NGXLoggerHttpServiceMock {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  logOnServer(url: string, message: string, additional: any[], timestamp: string, logLevel: string): Observable<any> {\r\n    return of({});\r\n  }\r\n}\r\n","import {Observable, of} from 'rxjs';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class NGXMapperServiceMock {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  public getCallerDetails(): Observable<{fileName: string, lineNumber: number, columnNumber: number}> {\r\n    return of({fileName: 'test.ts', lineNumber: 0, columnNumber: 0});\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { NGXLoggerMock } from './logger.service.mock';\r\nimport { NGXLoggerHttpServiceMock } from './http.service.mock';\r\nimport { CustomNGXLoggerServiceMock } from './custom-logger.service.mock';\r\nimport { NGXMapperServiceMock } from './mapper.service.mock';\r\nimport {\r\n  LoggerModule,\r\n  NGXLogger,\r\n  NGXLoggerHttpService,\r\n  CustomNGXLoggerService,\r\n  NGXMapperService\r\n} from 'ngx-logger';\r\n\r\n@NgModule({\r\n  imports: [LoggerModule],\r\n  providers: [\r\n    { provide: NGXLogger, useClass: NGXLoggerMock },\r\n    { provide: NGXLoggerHttpService, useClass: NGXLoggerHttpServiceMock },\r\n    { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },\r\n    { provide: NGXMapperService, useClass: NGXMapperServiceMock }\r\n  ]\r\n})\r\nexport class LoggerTestingModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;;;MAKa,aAAa;IAExB;KACC;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,UAAiB;KACvC;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,UAAiB;KACvC;IAED,IAAI,CAAC,OAAY,EAAE,GAAG,UAAiB;KACtC;IAED,GAAG,CAAC,OAAY,EAAE,GAAG,UAAiB;KACrC;IAED,IAAI,CAAC,OAAY,EAAE,GAAG,UAAiB;KACtC;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,UAAiB;KACvC;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,UAAiB;KACvC;IAED,YAAY,CAAC,MAAW;KAEvB;IAED,oBAAoB,CAAC,OAAoB;KACxC;IAED,eAAe,CAAC,MAAkB;KACjC;IAED,eAAe,CAAC,OAAyB;KACxC;IAED,6BAA6B,CAAC,eAAwB;KACrD;IAED,iBAAiB;QACf,OAAO,IAAI,YAAY,EAAE,CAAC;KAC3B;;;YA7CF,UAAU;;;;;ACDX;;;MAIa,0BAA0B;IAErC;KACC;IAED,MAAM;;QAEJ,OAAO,IAAI,aAAa,EAAE,CAAC;KAC5B;;;YATF,UAAU;;;;;MCFE,wBAAwB;IACnC;KAEC;IAED,WAAW,CAAC,GAAW,EAAE,OAAe,EAAE,UAAiB,EAAE,SAAiB,EAAE,QAAgB;QAC9F,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;KACf;;;YARF,UAAU;;;;;MCCE,oBAAoB;IAC/B;KAEC;IAEM,gBAAgB;QACrB,OAAO,EAAE,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAC,CAAC,CAAC;KAClE;;;YARF,UAAU;;;;;MCoBE,mBAAmB;;;YAT/B,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,CAAC;gBACvB,SAAS,EAAE;oBACT,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,EAAE;oBAC/C,EAAE,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,wBAAwB,EAAE;oBACrE,EAAE,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,0BAA0B,EAAE;oBACzE,EAAE,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,oBAAoB,EAAE;iBAC9D;aACF;;;ACtBD;;;;;;"}