import { DEFAULT_COLOR_SCHEME } from '../resources/color-schemes';
import { NgxLoggerLevel } from '../types/logger-level.enum';
export class NGXLoggerUtils {
    static prepareMetaString(timestamp, logLevel, fileName, lineNumber) {
        const fileDetails = fileName ? ` [${fileName}:${lineNumber}]` : '';
        return `${timestamp} ${logLevel}${fileDetails}`;
    }
    static getColor(level, configColorScheme) {
        switch (level) {
            case NgxLoggerLevel.TRACE:
                return this.getColorFromConfig(NgxLoggerLevel.TRACE, configColorScheme);
            case NgxLoggerLevel.DEBUG:
                return this.getColorFromConfig(NgxLoggerLevel.DEBUG, configColorScheme);
            case NgxLoggerLevel.INFO:
                return this.getColorFromConfig(NgxLoggerLevel.INFO, configColorScheme);
            case NgxLoggerLevel.LOG:
                return this.getColorFromConfig(NgxLoggerLevel.LOG, configColorScheme);
            case NgxLoggerLevel.WARN:
                return this.getColorFromConfig(NgxLoggerLevel.WARN, configColorScheme);
            case NgxLoggerLevel.ERROR:
                return this.getColorFromConfig(NgxLoggerLevel.ERROR, configColorScheme);
            case NgxLoggerLevel.FATAL:
                return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);
            case NgxLoggerLevel.OFF:
            default:
                return;
        }
    }
    static getColorFromConfig(level, configColorScheme) {
        if (!configColorScheme) {
            return DEFAULT_COLOR_SCHEME[level];
        }
        return configColorScheme[level];
    }
    static prepareMessage(message) {
        try {
            if (typeof message !== 'string' && !(message instanceof Error)) {
                message = JSON.stringify(message, null, 2);
            }
        }
        catch (e) {
            // additional = [message, ...additional];
            message = 'The provided "message" value could not be parsed with JSON.stringify().';
        }
        return message;
    }
    static prepareAdditionalParameters(additional) {
        if (additional === null || additional === undefined) {
            return null;
        }
        return additional.map((next, idx) => {
            try {
                // We just want to make sure the JSON can be parsed, we do not want to actually change the type
                if (typeof next === 'object') {
                    JSON.stringify(next);
                }
                return next;
            }
            catch (e) {
                return `The additional[${idx}] value could not be parsed using JSON.stringify().`;
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi91dGlscy9sb2dnZXIudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDaEUsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBRTFELE1BQU0sT0FBTyxjQUFjO0lBRXpCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxTQUFpQixFQUFFLFFBQWdCLEVBQUUsUUFBZ0IsRUFBRSxVQUFrQjtRQUNoRyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFbkUsT0FBTyxHQUFHLFNBQVMsSUFBSSxRQUFRLEdBQUcsV0FBVyxFQUFFLENBQUM7SUFDbEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBcUIsRUFBRSxpQkFBaUM7UUFDdEUsUUFBUSxLQUFLLEVBQUU7WUFDYixLQUFLLGNBQWMsQ0FBQyxLQUFLO2dCQUN2QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDMUUsS0FBSyxjQUFjLENBQUMsS0FBSztnQkFDdkIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQzFFLEtBQUssY0FBYyxDQUFDLElBQUk7Z0JBQ3RCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUN6RSxLQUFLLGNBQWMsQ0FBQyxHQUFHO2dCQUNyQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDeEUsS0FBSyxjQUFjLENBQUMsSUFBSTtnQkFDdEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3pFLEtBQUssY0FBYyxDQUFDLEtBQUs7Z0JBQ3ZCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUMxRSxLQUFLLGNBQWMsQ0FBQyxLQUFLO2dCQUN2QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDMUUsS0FBSyxjQUFjLENBQUMsR0FBRyxDQUFDO1lBQ3hCO2dCQUNFLE9BQU87U0FDVjtJQUNILENBQUM7SUFFTyxNQUFNLENBQUMsa0JBQWtCLENBQUMsS0FBYSxFQUFFLGlCQUFnQztRQUMvRSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDdEIsT0FBTyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNwQztRQUVELE9BQU8saUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTztRQUMzQixJQUFJO1lBQ0YsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLE9BQU8sWUFBWSxLQUFLLENBQUMsRUFBRTtnQkFDOUQsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQzthQUM1QztTQUNGO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVix5Q0FBeUM7WUFDekMsT0FBTyxHQUFHLHlFQUF5RSxDQUFDO1NBQ3JGO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVELE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxVQUFpQjtRQUNsRCxJQUFJLFVBQVUsS0FBSyxJQUFJLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUNuRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ2xDLElBQUk7Z0JBQ0YsK0ZBQStGO2dCQUMvRixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtvQkFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDdEI7Z0JBRUQsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLE9BQU8sa0JBQWtCLEdBQUcscURBQXFELENBQUM7YUFDbkY7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7REVGQVVMVF9DT0xPUl9TQ0hFTUV9IGZyb20gJy4uL3Jlc291cmNlcy9jb2xvci1zY2hlbWVzJztcclxuaW1wb3J0IHtOZ3hMb2dnZXJMZXZlbH0gZnJvbSAnLi4vdHlwZXMvbG9nZ2VyLWxldmVsLmVudW0nO1xyXG5cclxuZXhwb3J0IGNsYXNzIE5HWExvZ2dlclV0aWxzIHtcclxuXHJcbiAgc3RhdGljIHByZXBhcmVNZXRhU3RyaW5nKHRpbWVzdGFtcDogc3RyaW5nLCBsb2dMZXZlbDogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nLCBsaW5lTnVtYmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGZpbGVEZXRhaWxzID0gZmlsZU5hbWUgPyBgIFske2ZpbGVOYW1lfToke2xpbmVOdW1iZXJ9XWAgOiAnJztcclxuXHJcbiAgICByZXR1cm4gYCR7dGltZXN0YW1wfSAke2xvZ0xldmVsfSR7ZmlsZURldGFpbHN9YDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRDb2xvcihsZXZlbDogTmd4TG9nZ2VyTGV2ZWwsIGNvbmZpZ0NvbG9yU2NoZW1lPzogQXJyYXk8c3RyaW5nPik6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICBzd2l0Y2ggKGxldmVsKSB7XHJcbiAgICAgIGNhc2UgTmd4TG9nZ2VyTGV2ZWwuVFJBQ0U6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29sb3JGcm9tQ29uZmlnKE5neExvZ2dlckxldmVsLlRSQUNFLCBjb25maWdDb2xvclNjaGVtZSk7XHJcbiAgICAgIGNhc2UgTmd4TG9nZ2VyTGV2ZWwuREVCVUc6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29sb3JGcm9tQ29uZmlnKE5neExvZ2dlckxldmVsLkRFQlVHLCBjb25maWdDb2xvclNjaGVtZSk7XHJcbiAgICAgIGNhc2UgTmd4TG9nZ2VyTGV2ZWwuSU5GTzpcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb2xvckZyb21Db25maWcoTmd4TG9nZ2VyTGV2ZWwuSU5GTywgY29uZmlnQ29sb3JTY2hlbWUpO1xyXG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLkxPRzpcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb2xvckZyb21Db25maWcoTmd4TG9nZ2VyTGV2ZWwuTE9HLCBjb25maWdDb2xvclNjaGVtZSk7XHJcbiAgICAgIGNhc2UgTmd4TG9nZ2VyTGV2ZWwuV0FSTjpcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb2xvckZyb21Db25maWcoTmd4TG9nZ2VyTGV2ZWwuV0FSTiwgY29uZmlnQ29sb3JTY2hlbWUpO1xyXG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLkVSUk9SOlxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbG9yRnJvbUNvbmZpZyhOZ3hMb2dnZXJMZXZlbC5FUlJPUiwgY29uZmlnQ29sb3JTY2hlbWUpO1xyXG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLkZBVEFMOlxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbG9yRnJvbUNvbmZpZyhOZ3hMb2dnZXJMZXZlbC5GQVRBTCwgY29uZmlnQ29sb3JTY2hlbWUpO1xyXG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLk9GRjpcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBnZXRDb2xvckZyb21Db25maWcobGV2ZWw6IG51bWJlciwgY29uZmlnQ29sb3JTY2hlbWU6IEFycmF5PHN0cmluZz4pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgaWYgKCFjb25maWdDb2xvclNjaGVtZSkge1xyXG4gICAgICByZXR1cm4gREVGQVVMVF9DT0xPUl9TQ0hFTUVbbGV2ZWxdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjb25maWdDb2xvclNjaGVtZVtsZXZlbF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcHJlcGFyZU1lc3NhZ2UobWVzc2FnZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSAnc3RyaW5nJyAmJiAhKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikpIHtcclxuICAgICAgICBtZXNzYWdlID0gSlNPTi5zdHJpbmdpZnkobWVzc2FnZSwgbnVsbCwgMik7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgLy8gYWRkaXRpb25hbCA9IFttZXNzYWdlLCAuLi5hZGRpdGlvbmFsXTtcclxuICAgICAgbWVzc2FnZSA9ICdUaGUgcHJvdmlkZWQgXCJtZXNzYWdlXCIgdmFsdWUgY291bGQgbm90IGJlIHBhcnNlZCB3aXRoIEpTT04uc3RyaW5naWZ5KCkuJztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWVzc2FnZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcmVwYXJlQWRkaXRpb25hbFBhcmFtZXRlcnMoYWRkaXRpb25hbDogYW55W10pIHtcclxuICAgIGlmIChhZGRpdGlvbmFsID09PSBudWxsIHx8IGFkZGl0aW9uYWwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWRkaXRpb25hbC5tYXAoKG5leHQsIGlkeCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIFdlIGp1c3Qgd2FudCB0byBtYWtlIHN1cmUgdGhlIEpTT04gY2FuIGJlIHBhcnNlZCwgd2UgZG8gbm90IHdhbnQgdG8gYWN0dWFsbHkgY2hhbmdlIHRoZSB0eXBlXHJcbiAgICAgICAgaWYgKHR5cGVvZiBuZXh0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkobmV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJldHVybiBgVGhlIGFkZGl0aW9uYWxbJHtpZHh9XSB2YWx1ZSBjb3VsZCBub3QgYmUgcGFyc2VkIHVzaW5nIEpTT04uc3RyaW5naWZ5KCkuYDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=