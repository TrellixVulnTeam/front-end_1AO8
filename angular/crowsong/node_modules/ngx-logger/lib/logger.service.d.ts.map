{"version":3,"file":"logger.service.d.ts","sources":["logger.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { DatePipe } from '@angular/common';\r\nimport { NGXLoggerHttpService } from './http.service';\r\nimport { NgxLoggerLevel } from './types/logger-level.enum';\r\nimport { LoggerConfig } from './logger.config';\r\nimport { NGXLoggerMonitor } from './logger-monitor';\r\nimport { NGXMapperService } from './mapper.service';\r\nexport declare const Levels: string[];\r\nexport declare class NGXLogger {\r\n    private readonly mapperService;\r\n    private readonly httpService;\r\n    private platformId;\r\n    private readonly datePipe;\r\n    private readonly _isIE;\r\n    private readonly _logFunc;\r\n    private config;\r\n    private _customHttpHeaders;\r\n    private _customParams;\r\n    private _withCredentials;\r\n    private _loggerMonitor;\r\n    constructor(mapperService: NGXMapperService, httpService: NGXLoggerHttpService, loggerConfig: LoggerConfig, platformId: any, datePipe: DatePipe);\r\n    /** Get a readonly access to the level configured for the NGXLogger */\r\n    get level(): NgxLoggerLevel;\r\n    /** Get a readonly access to the serverLogLevel configured for the NGXLogger */\r\n    get serverLogLevel(): NgxLoggerLevel;\r\n    trace(message: any, ...additional: any[]): void;\r\n    debug(message: any, ...additional: any[]): void;\r\n    info(message: any, ...additional: any[]): void;\r\n    log(message: any, ...additional: any[]): void;\r\n    warn(message: any, ...additional: any[]): void;\r\n    error(message: any, ...additional: any[]): void;\r\n    fatal(message: any, ...additional: any[]): void;\r\n    setCustomHttpHeaders(headers: HttpHeaders): void;\r\n    setCustomParams(params: HttpParams): void;\r\n    setWithCredentialsOptionValue(withCredentials: boolean): void;\r\n    registerMonitor(monitor: NGXLoggerMonitor): void;\r\n    updateConfig(config: LoggerConfig): void;\r\n    getConfigSnapshot(): LoggerConfig;\r\n    private _logIE;\r\n    private _logModern;\r\n    private _log;\r\n}\r\n"]}